master_process off;
daemon off;
error_log ./servroot/logs/error.log debug;
pid       ./servroot/nginx.pid;

env MOCKEAGAIN_VERBOSE;
env MOCKEAGAIN;
env MOCKEAGAIN_WRITE_TIMEOUT_PATTERN;
env LD_PRELOAD;
env LD_LIBRARY_PATH;
env DYLD_INSERT_LIBRARIES;
env DYLD_FORCE_FLAT_NAMESPACE;
env ASAN_OPTIONS;
env MOCKNOEAGAIN_VERBOSE;
env MOCKNOEAGAIN;
#timer_resolution 100ms;

events {
    accept_mutex off;
    worker_connections  64;
}

http {
    access_log ./servroot/logs/access.log;

    default_type text/plain;
    keepalive_timeout  68;

    server {
        listen          1984;
        server_name     'localhost';
        client_max_body_size 30M;
        set $upstream default;
        set $rule_name "";
        set $backend_protocol https;

        location /t {
            rewrite_by_lua_block {
                -- we could change backend_protocol since that proxy pass to https or http
				ngx.var.backend_protocol = "http"
			}
            proxy_pass $backend_protocol://http_backend;
        }
    }

    upstream http_backend {
        server 0.0.0.1:1234;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local ngx_balancer = require "ngx.balancer"
            local bs = {{
                address = "127.0.0.1",
                port = 9000
                -- weight = 25 这里可以有各种各种的属性
            }, {
                address = "127.0.0.1",
                port = 9001
            }, {
                address = "127.0.0.1",
                port = 9002
            }}
            -- -- 还有一些信息 例如后端的连接数等
            -- -- 总而言之 根据这些信息 我们要选择出一个合适的后端来

            local peer = backends[0]
            local ok, err = ngx_balancer.set_current_peer(peer.address, peer.port)
            if err ~= nil 
                ngx.log(ngx.ERR, err)
            end
        }
    }
}